<?php

namespace Pointotech\Schemas;

use Exception;

use Pointotech\Collections\Dictionary;
use Pointotech\Database\DatabaseClient;
use Pointotech\FileSystem\Directory;
use Pointotech\Json\JsonFileReader;

class BackedUpDataRestorer
{
  static function restoreToStaging(
    string $projectDirectoryPath
  ): void {

    $startTimestamp = time();
    echo 'BackedUpDataRestorer::restoreToStaging started at '
      . date(format: 'm/d/Y H:i:s', timestamp: $startTimestamp) . ' '
      . '(UTC timestamp: ' . $startTimestamp . ')...' . "\n";
    echo  "\n";
    echo "Project directory path: $projectDirectoryPath" . "\n";

    $databaseName = 'klimek_reviews_server_development';

    $tableName = 'question_answered_by_users';
    //$tableName = 'users';

    $tableBackupDirectory = "$projectDirectoryPath/public/$tableName";

    $fileNames = array_values(array_filter(
      Directory::listFileNames($tableBackupDirectory),
      function (string $fileName): bool {
        return str_starts_with($fileName, 'section_');
      }
    ));
    usort($fileNames, function (string $a, string $b): int {
      $aNumber = self::extractNumberFromFileName($a);
      $bNumber = self::extractNumberFromFileName($b);
      return $aNumber - $bNumber;
    });

    $client = new DatabaseClient(
      $projectDirectoryPath,
      databaseName: $databaseName,
      environmentName: 'staging'
    );

    foreach ($fileNames as $fileName) {
      echo  "\n";
      echo "Loading data from $fileName..." . "\n";

      $backedUpRows = JsonFileReader::read($tableBackupDirectory, $fileName);

      foreach ($backedUpRows as $backedUpRow) {

        $columnNames = array_values(array_filter(
          array_keys($backedUpRow),
          function (string $columnName): bool {
            // TODO: Check what the autogenerated primary key is, instead of assuming that it is "id".
            return $columnName !== 'id';
          }
        ));
        $columnValues = array_map(
          function (string $columnName) use ($backedUpRow): string | null {
            return Dictionary::get($backedUpRow, $columnName);
          },
          $columnNames
        );
        $columnValuePlaceholders = array_map(
          function (int $columnPosition): string {
            $columnNumber = $columnPosition + 1;
            return "$$columnNumber";
          },
          array_keys($columnNames)
        );

        $query = "insert into $tableName(" . join(", ", $columnNames) . ") values(" . join(", ", $columnValuePlaceholders) . ")";

        //echo "\n" . $query . "\n" . json_encode($columnValues) . "\n";

        $client->get($query, $columnValues);
      }
    }
  }

  private static function extractNumberFromFileName(string $fileName): int
  {
    $matches = [];
    $matchResult = preg_match("/^section_(\d+)\\.json$/", $fileName, $matches);

    if ($matchResult === false) {
      throw new Exception("Unable to extract section number from file name: $fileName");
    }

    return intval($matches[1]);
  }
}
